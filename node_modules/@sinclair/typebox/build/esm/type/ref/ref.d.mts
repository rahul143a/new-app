import type { TSchema, SchemaOptions } from '../schema/index.mjs';
import { Kind } from '../symbols/index.mjs';
import { TUnsafe } from '../unsafe/index.mjs';
import { Static } from '../static/index.mjs';
export interface TRef<Ref extends string = string> extends TSchema {
    [Kind]: 'Ref';
    static: unknown;
    $ref: Ref;
}
export type TRefUnsafe<Type extends TSchema> = TUnsafe<Static<Type>>;
/** `[Json]` Creates a Ref type.*/
export declare function Ref<Ref extends string>($ref: Ref, options?: SchemaOptions): TRef<Ref>;
/**
 * @deprecated `[Json]` Creates a Ref type. The referenced type MUST contain a $id. The Ref(TSchema) signature was
 * deprecated on 0.34.0 in support of a new type referencing model (Module). Existing implementations using Ref(TSchema)
 * can migrate using the following. The Ref(TSchema) validation behavior of Ref will be preserved how the construction
 * of legacy Ref(TSchema) will require wrapping in TUnsafe (where TUnsafe is used for inference only)
 *
 * ```typescript
 * const R = Type.Ref(T)
 * ```
 * to
 *
 * ```typescript
 * const R = Type.Unsafe<Static<T>>(T.$id)
 * ```
 */
export declare function Ref<Type extends TSchema>(type: Type, options?: SchemaOptions): TRefUnsafe<Type>;
