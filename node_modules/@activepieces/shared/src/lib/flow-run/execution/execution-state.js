"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutionState = void 0;
const action_1 = require("../../flows/actions/action");
class ExecutionState {
    constructor(executionState) {
        this._taskCount = 0;
        this.steps = {};
        this.lastStepState = {};
        if (executionState) {
            this._taskCount = executionState._taskCount;
            this.steps = executionState.steps;
            this.lastStepState = executionState.lastStepState;
        }
    }
    get taskCount() {
        return this._taskCount;
    }
    adjustTaskCount({ stepOutput }) {
        const nonCountableSteps = [
            action_1.ActionType.BRANCH,
            action_1.ActionType.LOOP_ON_ITEMS,
        ];
        const stepIsCountable = !nonCountableSteps.includes(stepOutput.type);
        if (stepIsCountable) {
            this._taskCount += 1;
        }
    }
    insertStep(stepOutput, stepName, ancestors) {
        const targetMap = this.getTargetMap(ancestors);
        this.adjustTaskCount({
            stepOutput,
        });
        targetMap[stepName] = stepOutput;
        this.updateLastStep(stepOutput.output, stepName);
    }
    updateLastStep(outputOnly, stepName) {
        this.lastStepState[stepName] = ExecutionState.deepClone(outputOnly);
    }
    getStepOutput(params) {
        const { stepName, ancestors } = params;
        const targetMap = this.getTargetMap(ancestors);
        return targetMap[stepName];
    }
    static deepClone(value) {
        if (value === undefined) {
            return undefined;
        }
        if (value === null) {
            return null;
        }
        return JSON.parse(JSON.stringify(value));
    }
    getTargetMap(ancestors) {
        let targetMap = this.steps;
        ancestors.forEach(parent => {
            // get loopStepOutput
            if (targetMap[parent[0]] === undefined) {
                throw 'Error in ancestor tree';
            }
            const targetStepOutput = targetMap[parent[0]];
            if (targetStepOutput.type !== action_1.ActionType.LOOP_ON_ITEMS) {
                throw new Error('[ExecutionState#getTargetMap] Not instance of Loop On Items step output');
            }
            const loopOutput = targetStepOutput;
            targetMap = loopOutput.output.iterations[parent[1]];
        });
        return targetMap;
    }
}
exports.ExecutionState = ExecutionState;
//# sourceMappingURL=execution-state.js.map