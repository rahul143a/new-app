import { FlowOperationRequest } from './flow-operations';
import { Action, ActionType, BranchAction, LoopOnItemsAction } from './actions/action';
import { Trigger, TriggerType } from './triggers/trigger';
import { FlowVersion } from './flow-version';
type Step = Action | Trigger;
type GetAllSubFlowSteps = {
    subFlowStartStep: Step;
};
type GetStepFromSubFlow = {
    subFlowStartStep: Step;
    stepName: string;
};
declare function isValid(flowVersion: FlowVersion): boolean;
declare function isAction(type: ActionType | TriggerType | undefined): boolean;
declare function isTrigger(type: ActionType | TriggerType | undefined): boolean;
declare function getUsedPieces(trigger: Trigger): string[];
declare function transferFlowAsync<T extends Step>(flowVersion: FlowVersion, transferFunction: (step: T) => Promise<T>): Promise<FlowVersion>;
declare function getAllSteps(trigger: Trigger): (Action | Trigger)[];
declare function getAllStepsAtFirstLevel(step: Trigger): (Action | Trigger)[];
declare function getAllChildSteps(action: LoopOnItemsAction | BranchAction): Action[];
declare function getStep(flowVersion: FlowVersion, stepName: string): Action | Trigger | undefined;
declare function isChildOf(parent: LoopOnItemsAction | BranchAction, child: Action): boolean;
export declare function getImportOperations(step: Action | Trigger | undefined): FlowOperationRequest[];
export declare const flowHelper: {
    isValid: typeof isValid;
    apply(flowVersion: FlowVersion, operation: FlowOperationRequest): FlowVersion;
    getStep: typeof getStep;
    isAction: typeof isAction;
    isTrigger: typeof isTrigger;
    getAllSteps: typeof getAllSteps;
    getUsedPieces: typeof getUsedPieces;
    getImportOperations: typeof getImportOperations;
    getAllSubFlowSteps: ({ subFlowStartStep }: GetAllSubFlowSteps) => Step[];
    getStepFromSubFlow: ({ subFlowStartStep, stepName }: GetStepFromSubFlow) => Step | undefined;
    isChildOf: typeof isChildOf;
    transferFlowAsync: typeof transferFlowAsync;
    getAllChildSteps: typeof getAllChildSteps;
    getAllStepsAtFirstLevel: typeof getAllStepsAtFirstLevel;
};
export {};
