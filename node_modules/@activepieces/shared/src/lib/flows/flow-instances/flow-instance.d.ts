import { Static } from "@sinclair/typebox";
import { ApId } from "../../common/id-generator";
import { ProjectId } from "../../project/project";
import { FlowId } from "../flow";
import { FlowVersionId } from "../flow-version";
export type FlowInstanceId = ApId;
export declare enum ScheduleType {
    CRON_EXPRESSION = "CRON_EXPRESSION"
}
export declare enum FlowInstanceStatus {
    ENABLED = "ENABLED",
    DISABLED = "DISABLED",
    UNPUBLISHED = "UNPUBLISHED"
}
export declare const FlowScheduleOptions: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
    type: import("@sinclair/typebox").TLiteral<ScheduleType>;
    cronExpression: import("@sinclair/typebox").TString<string>;
    timezone: import("@sinclair/typebox").TString<string>;
}>>;
export type FlowScheduleOptions = Static<typeof FlowScheduleOptions>;
export declare const FlowInstance: import("@sinclair/typebox").TObject<{
    projectId: import("@sinclair/typebox").TString<string>;
    flowId: import("@sinclair/typebox").TString<string>;
    flowVersionId: import("@sinclair/typebox").TString<string>;
    schedule: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TLiteral<ScheduleType>;
        cronExpression: import("@sinclair/typebox").TString<string>;
        timezone: import("@sinclair/typebox").TString<string>;
    }>>;
    status: import("@sinclair/typebox").TEnum<typeof FlowInstanceStatus>;
    id: import("@sinclair/typebox").TString<string>;
    created: import("@sinclair/typebox").TString<string>;
    updated: import("@sinclair/typebox").TString<string>;
}>;
export type FlowInstance = Static<typeof FlowInstance> & {
    projectId: ProjectId;
    flowId: FlowId;
    flowVersionId: FlowVersionId;
};
