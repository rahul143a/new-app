import { BasePropertySchema, TPropertyValue } from "../common";
import { DropdownState } from "./common";
import { PropertyContext } from "../../../context";
import { PropertyType } from "../property-type";
type DynamicDropdownOptions<T> = (propsValue: Record<string, unknown>, ctx: PropertyContext) => Promise<DropdownState<T>>;
export declare const DropdownProperty: import("@sinclair/typebox").TObject<{
    [x: string]: import("@sinclair/typebox").TSchema;
    [x: number]: import("@sinclair/typebox").TSchema;
    displayName: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TSchema]>;
    description: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TSchema]>;
}>;
export type DropdownProperty<T, R extends boolean> = BasePropertySchema & {
    refreshers: string[];
    refreshOnSearch?: boolean;
    options: DynamicDropdownOptions<T>;
} & TPropertyValue<T, PropertyType.DROPDOWN, R>;
export declare const MultiSelectDropdownProperty: import("@sinclair/typebox").TObject<{
    [x: string]: import("@sinclair/typebox").TSchema;
    [x: number]: import("@sinclair/typebox").TSchema;
    displayName: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TSchema]>;
    description: import("@sinclair/typebox").TIntersect<[import("@sinclair/typebox").TString, import("@sinclair/typebox").TSchema]>;
}>;
export type MultiSelectDropdownProperty<T, R extends boolean> = BasePropertySchema & {
    refreshers: string[];
    options: DynamicDropdownOptions<T>;
} & TPropertyValue<T[], PropertyType.MULTI_SELECT_DROPDOWN, R>;
export {};
