import { Static } from '@sinclair/typebox';
import { ApId } from '../common/id-generator';
export declare const ListProjectRequestForUserQueryParams: import("@sinclair/typebox").TObject<{
    cursor: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    limit: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    displayName: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export type ListProjectRequestForUserQueryParams = Static<typeof ListProjectRequestForUserQueryParams>;
export type ProjectId = ApId;
export declare enum PiecesFilterType {
    NONE = "NONE",
    ALLOWED = "ALLOWED"
}
export declare enum NotificationStatus {
    NEVER = "NEVER",
    ALWAYS = "ALWAYS",
    NEW_ISSUE = "NEW_ISSUE"
}
export declare const ProjectUsage: import("@sinclair/typebox").TObject<{
    tasks: import("@sinclair/typebox").TNumber;
    teamMembers: import("@sinclair/typebox").TNumber;
    aiTokens: import("@sinclair/typebox").TNumber;
    nextLimitResetDate: import("@sinclair/typebox").TString;
}>;
export declare const SwitchProjectResponse: import("@sinclair/typebox").TObject<{
    token: import("@sinclair/typebox").TString;
}>;
export type SwitchProjectResponse = Static<typeof SwitchProjectResponse>;
export type ProjectUsage = Static<typeof ProjectUsage>;
export type ProjectPlanId = string;
export declare const ProjectPlan: import("@sinclair/typebox").TObject<{
    projectId: import("@sinclair/typebox").TString;
    name: import("@sinclair/typebox").TString;
    piecesFilterType: import("@sinclair/typebox").TEnum<typeof PiecesFilterType>;
    pieces: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    tasks: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<number | null>>;
    aiTokens: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<number | null>>;
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
}>;
export type ProjectPlan = Static<typeof ProjectPlan>;
export declare const Project: import("@sinclair/typebox").TObject<{
    deleted: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    ownerId: import("@sinclair/typebox").TString;
    displayName: import("@sinclair/typebox").TString;
    notifyStatus: import("@sinclair/typebox").TEnum<typeof NotificationStatus>;
    platformId: import("@sinclair/typebox").TString;
    externalId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    releasesEnabled: import("@sinclair/typebox").TBoolean;
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
}>;
export type Project = Static<typeof Project>;
export declare const ProjectWithLimits: import("@sinclair/typebox").TObject<{
    displayName: import("@sinclair/typebox").TString;
    externalId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
    ownerId: import("@sinclair/typebox").TString;
    platformId: import("@sinclair/typebox").TString;
    notifyStatus: import("@sinclair/typebox").TEnum<typeof NotificationStatus>;
    releasesEnabled: import("@sinclair/typebox").TBoolean;
    usage: import("@sinclair/typebox").TObject<{
        tasks: import("@sinclair/typebox").TNumber;
        teamMembers: import("@sinclair/typebox").TNumber;
        aiTokens: import("@sinclair/typebox").TNumber;
        nextLimitResetDate: import("@sinclair/typebox").TString;
    }>;
    plan: import("@sinclair/typebox").TObject<{
        projectId: import("@sinclair/typebox").TString;
        name: import("@sinclair/typebox").TString;
        piecesFilterType: import("@sinclair/typebox").TEnum<typeof PiecesFilterType>;
        pieces: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        tasks: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<number | null>>;
        aiTokens: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<number | null>>;
        id: import("@sinclair/typebox").TString;
        created: import("@sinclair/typebox").TString;
        updated: import("@sinclair/typebox").TString;
    }>;
    analytics: import("@sinclair/typebox").TObject<{
        totalUsers: import("@sinclair/typebox").TNumber;
        activeUsers: import("@sinclair/typebox").TNumber;
        totalFlows: import("@sinclair/typebox").TNumber;
        activeFlows: import("@sinclair/typebox").TNumber;
    }>;
}>;
export declare const UpdateProjectRequestInCommunity: import("@sinclair/typebox").TObject<{
    notifyStatus: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TEnum<typeof NotificationStatus>>;
    displayName: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export type UpdateProjectRequestInCommunity = Static<typeof UpdateProjectRequestInCommunity>;
export type ProjectWithLimits = Static<typeof ProjectWithLimits>;
export declare const ProjectMetaData: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    displayName: import("@sinclair/typebox").TString;
}>;
export type ProjectMetaData = Static<typeof ProjectMetaData>;
export declare const ProjectWithLimitsWithPlatform: import("@sinclair/typebox").TObject<{
    platformName: import("@sinclair/typebox").TString;
    projects: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        displayName: import("@sinclair/typebox").TString;
        externalId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        id: import("@sinclair/typebox").TString;
        created: import("@sinclair/typebox").TString;
        updated: import("@sinclair/typebox").TString;
        ownerId: import("@sinclair/typebox").TString;
        platformId: import("@sinclair/typebox").TString;
        notifyStatus: import("@sinclair/typebox").TEnum<typeof NotificationStatus>;
        releasesEnabled: import("@sinclair/typebox").TBoolean;
        usage: import("@sinclair/typebox").TObject<{
            tasks: import("@sinclair/typebox").TNumber;
            teamMembers: import("@sinclair/typebox").TNumber;
            aiTokens: import("@sinclair/typebox").TNumber;
            nextLimitResetDate: import("@sinclair/typebox").TString;
        }>;
        plan: import("@sinclair/typebox").TObject<{
            projectId: import("@sinclair/typebox").TString;
            name: import("@sinclair/typebox").TString;
            piecesFilterType: import("@sinclair/typebox").TEnum<typeof PiecesFilterType>;
            pieces: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            tasks: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<number | null>>;
            aiTokens: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<number | null>>;
            id: import("@sinclair/typebox").TString;
            created: import("@sinclair/typebox").TString;
            updated: import("@sinclair/typebox").TString;
        }>;
        analytics: import("@sinclair/typebox").TObject<{
            totalUsers: import("@sinclair/typebox").TNumber;
            activeUsers: import("@sinclair/typebox").TNumber;
            totalFlows: import("@sinclair/typebox").TNumber;
            activeFlows: import("@sinclair/typebox").TNumber;
        }>;
    }>>;
}>;
export type ProjectWithLimitsWithPlatform = Static<typeof ProjectWithLimitsWithPlatform>;
