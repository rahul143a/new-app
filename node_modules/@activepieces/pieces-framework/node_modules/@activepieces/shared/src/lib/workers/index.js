"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerMachineHealthcheckResponse = exports.WorkerMachineHealthcheckRequest = exports.WorkerMachineWithStatus = exports.WorkerMachine = exports.MachineInformation = exports.WorkerMachineStatus = void 0;
const typebox_1 = require("@sinclair/typebox");
const common_1 = require("../common");
var WorkerMachineStatus;
(function (WorkerMachineStatus) {
    WorkerMachineStatus["ONLINE"] = "ONLINE";
    WorkerMachineStatus["OFFLINE"] = "OFFLINE";
})(WorkerMachineStatus || (exports.WorkerMachineStatus = WorkerMachineStatus = {}));
exports.MachineInformation = typebox_1.Type.Object({
    cpuUsagePercentage: typebox_1.Type.Number(),
    diskInfo: typebox_1.Type.Object({
        total: typebox_1.Type.Number(),
        free: typebox_1.Type.Number(),
        used: typebox_1.Type.Number(),
        percentage: typebox_1.Type.Number(),
    }),
    workerProps: typebox_1.Type.Record(typebox_1.Type.String(), typebox_1.Type.String()),
    ramUsagePercentage: typebox_1.Type.Number(),
    totalAvailableRamInBytes: typebox_1.Type.Number(),
    ip: typebox_1.Type.String(),
});
exports.WorkerMachine = typebox_1.Type.Object(Object.assign(Object.assign({}, common_1.BaseModelSchema), { information: exports.MachineInformation }));
exports.WorkerMachineWithStatus = typebox_1.Type.Composite([exports.WorkerMachine, typebox_1.Type.Object({
        status: typebox_1.Type.Enum(WorkerMachineStatus),
    })]);
exports.WorkerMachineHealthcheckRequest = exports.MachineInformation;
exports.WorkerMachineHealthcheckResponse = typebox_1.Type.Object({
    PUBLIC_URL: typebox_1.Type.String(),
    TRIGGER_TIMEOUT_SECONDS: typebox_1.Type.Number(),
    PAUSED_FLOW_TIMEOUT_DAYS: typebox_1.Type.Number(),
    EXECUTION_MODE: typebox_1.Type.String(),
    FLOW_TIMEOUT_SECONDS: typebox_1.Type.Number(),
    FLOW_WORKER_CONCURRENCY: typebox_1.Type.Number(),
    SCHEDULED_WORKER_CONCURRENCY: typebox_1.Type.Number(),
    LOG_LEVEL: typebox_1.Type.String(),
    LOG_PRETTY: typebox_1.Type.String(),
    ENVIRONMENT: typebox_1.Type.String(),
    APP_WEBHOOK_SECRETS: typebox_1.Type.String(),
    MAX_FILE_SIZE_MB: typebox_1.Type.Number(),
    SANDBOX_MEMORY_LIMIT: typebox_1.Type.String(),
    SANDBOX_PROPAGATED_ENV_VARS: typebox_1.Type.Array(typebox_1.Type.String()),
    PIECES_SOURCE: typebox_1.Type.String(),
    DEV_PIECES: typebox_1.Type.Array(typebox_1.Type.String()),
    SENTRY_DSN: typebox_1.Type.Optional(typebox_1.Type.String()),
    LOKI_PASSWORD: typebox_1.Type.Optional(typebox_1.Type.String()),
    LOKI_URL: typebox_1.Type.Optional(typebox_1.Type.String()),
    LOKI_USERNAME: typebox_1.Type.Optional(typebox_1.Type.String()),
    FILE_STORAGE_LOCATION: typebox_1.Type.String(),
    S3_USE_SIGNED_URLS: typebox_1.Type.String(),
});
//# sourceMappingURL=index.js.map