import { Static } from '@sinclair/typebox';
import { FlowRunStatus } from './execution/flow-execution';
import { FlowRetryStrategy } from './flow-run';
export declare const TestFlowRunRequestBody: import("@sinclair/typebox").TObject<{
    flowVersionId: import("@sinclair/typebox").TString;
}>;
export type TestFlowRunRequestBody = Static<typeof TestFlowRunRequestBody>;
export declare const RetryFlowRequestBody: import("@sinclair/typebox").TObject<{
    strategy: import("@sinclair/typebox").TEnum<typeof FlowRetryStrategy>;
    projectId: import("@sinclair/typebox").TString;
}>;
export type RetryFlowRequestBody = Static<typeof RetryFlowRequestBody>;
export declare const BulkRetryFlowRequestBody: import("@sinclair/typebox").TObject<{
    projectId: import("@sinclair/typebox").TString;
    flowRunIds: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>>;
    excludeFlowRunIds: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>>;
    strategy: import("@sinclair/typebox").TEnum<typeof FlowRetryStrategy>;
    status: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TEnum<typeof FlowRunStatus>>>;
    flowId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>>;
    createdAfter: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    createdBefore: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export type BulkRetryFlowRequestBody = Static<typeof BulkRetryFlowRequestBody>;
