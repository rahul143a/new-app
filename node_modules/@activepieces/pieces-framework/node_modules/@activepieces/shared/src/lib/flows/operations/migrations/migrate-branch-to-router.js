"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateBranchToRouter = void 0;
const common_1 = require("../../../common");
const action_1 = require("../../actions/action");
const flow_structure_util_1 = require("../../util/flow-structure-util");
exports.migrateBranchToRouter = {
    migrate: (flowVersion) => {
        if (!(0, common_1.isNil)(flowVersion.schemaVersion)) {
            return flowVersion;
        }
        const newVersion = flow_structure_util_1.flowStructureUtil.transferFlow(flowVersion, (step) => {
            var _a, _b;
            const unschemedStep = step;
            if (unschemedStep.type === 'BRANCH') {
                const routerAction = {
                    displayName: step.displayName,
                    name: step.name,
                    valid: step.valid,
                    type: action_1.ActionType.ROUTER,
                    settings: {
                        branches: [
                            {
                                branchName: 'Branch 1',
                                conditions: step.settings.conditions,
                                branchType: action_1.BranchExecutionType.CONDITION,
                            },
                            {
                                branchName: 'Otherwise',
                                branchType: action_1.BranchExecutionType.FALLBACK,
                            },
                        ],
                        executionType: action_1.RouterExecutionType.EXECUTE_FIRST_MATCH,
                        inputUiInfo: {
                            sampleDataFileId: undefined,
                            sampleDataInputFileId: undefined,
                            lastTestDate: undefined,
                            customizedInputs: undefined,
                            currentSelectedData: undefined,
                        },
                    },
                    nextAction: step.nextAction,
                    children: [(_a = unschemedStep.onSuccessAction) !== null && _a !== void 0 ? _a : null, (_b = unschemedStep.onFailureAction) !== null && _b !== void 0 ? _b : null],
                };
                return routerAction;
            }
            return step;
        });
        return Object.assign(Object.assign({}, newVersion), { schemaVersion: '1' });
    },
};
//# sourceMappingURL=migrate-branch-to-router.js.map