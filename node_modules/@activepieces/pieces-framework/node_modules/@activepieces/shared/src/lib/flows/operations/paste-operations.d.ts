import { Action } from '../actions/action';
import { FlowVersion } from '../flow-version';
import { FlowOperationType, StepLocationRelativeToParent } from './index';
export type InsideBranchPasteLocation = {
    branchIndex: number;
    stepLocationRelativeToParent: StepLocationRelativeToParent.INSIDE_BRANCH;
    parentStepName: string;
};
export type OutsideBranchPasteLocation = {
    parentStepName: string;
    stepLocationRelativeToParent: StepLocationRelativeToParent.AFTER | StepLocationRelativeToParent.INSIDE_LOOP;
};
export type PasteLocation = InsideBranchPasteLocation | OutsideBranchPasteLocation;
export declare const _getOperationsForPaste: (actions: Action[], flowVersion: FlowVersion, pastingDetails: PasteLocation) => ({
    type: FlowOperationType.MOVE_ACTION;
    request: {
        branchIndex?: number | undefined;
        stepLocationRelativeToNewParent?: StepLocationRelativeToParent | undefined;
        name: string;
        newParentStep: string;
    };
} | {
    type: FlowOperationType.CHANGE_STATUS;
    request: {
        status: import("..").FlowStatus;
    };
} | {
    type: FlowOperationType.LOCK_AND_PUBLISH;
    request: {};
} | {
    type: FlowOperationType.USE_AS_DRAFT;
    request: {
        versionId: string;
    };
} | {
    type: FlowOperationType.LOCK_FLOW;
    request: {};
} | {
    type: FlowOperationType.IMPORT_FLOW;
    request: {
        schemaVersion?: string | null | undefined;
        displayName: string;
        trigger: {
            nextAction?: any;
            type: import("../triggers/trigger").TriggerType.EMPTY;
            name: string;
            displayName: string;
            settings: any;
            valid: boolean;
        } | {
            nextAction?: any;
            type: import("../triggers/trigger").TriggerType.PIECE;
            name: string;
            displayName: string;
            settings: {
                triggerName?: string | undefined;
                packageType: import("../../pieces").PackageType;
                pieceType: import("../../pieces").PieceType;
                pieceName: string;
                pieceVersion: string;
                input: {
                    [x: string]: any;
                };
                inputUiInfo: {
                    sampleDataFileId?: string | undefined;
                    sampleDataInputFileId?: string | undefined;
                    lastTestDate?: string | undefined;
                    customizedInputs?: {
                        [x: string]: unknown;
                    } | undefined;
                    schema?: {
                        [x: string]: unknown;
                    } | undefined;
                    currentSelectedData?: unknown;
                };
            };
            valid: boolean;
        };
    };
} | {
    type: FlowOperationType.CHANGE_NAME;
    request: {
        displayName: string;
    };
} | {
    type: FlowOperationType.DELETE_ACTION;
    request: {
        names: string[];
    };
} | {
    type: FlowOperationType.UPDATE_ACTION;
    request: {
        skip?: boolean | undefined;
        customLogoUrl?: string | undefined;
        type: import("../actions/action").ActionType.ROUTER;
        name: string;
        displayName: string;
        settings: {
            inputUiInfo: {
                sampleDataFileId?: string | undefined;
                sampleDataInputFileId?: string | undefined;
                lastTestDate?: string | undefined;
                customizedInputs?: {
                    [x: string]: unknown;
                } | undefined;
                schema?: {
                    [x: string]: unknown;
                } | undefined;
                currentSelectedData?: unknown;
            };
            branches: ({
                conditions: ({
                    caseSensitive?: boolean | undefined;
                    operator?: import("../actions/action").BranchOperator.TEXT_CONTAINS | import("../actions/action").BranchOperator.TEXT_DOES_NOT_CONTAIN | import("../actions/action").BranchOperator.TEXT_EXACTLY_MATCHES | import("../actions/action").BranchOperator.TEXT_DOES_NOT_EXACTLY_MATCH | import("../actions/action").BranchOperator.TEXT_STARTS_WITH | import("../actions/action").BranchOperator.TEXT_DOES_NOT_START_WITH | import("../actions/action").BranchOperator.TEXT_ENDS_WITH | import("../actions/action").BranchOperator.TEXT_DOES_NOT_END_WITH | import("../actions/action").BranchOperator.LIST_CONTAINS | import("../actions/action").BranchOperator.LIST_DOES_NOT_CONTAIN | undefined;
                    firstValue: string;
                    secondValue: string;
                } | {
                    operator?: import("../actions/action").BranchOperator.NUMBER_IS_GREATER_THAN | import("../actions/action").BranchOperator.NUMBER_IS_LESS_THAN | import("../actions/action").BranchOperator.NUMBER_IS_EQUAL_TO | undefined;
                    firstValue: string;
                    secondValue: string;
                } | {
                    operator?: import("../actions/action").BranchOperator.DATE_IS_BEFORE | import("../actions/action").BranchOperator.DATE_IS_EQUAL | import("../actions/action").BranchOperator.DATE_IS_AFTER | undefined;
                    firstValue: string;
                    secondValue: string;
                } | {
                    operator?: import("../actions/action").BranchOperator.BOOLEAN_IS_TRUE | import("../actions/action").BranchOperator.BOOLEAN_IS_FALSE | import("../actions/action").BranchOperator.LIST_IS_EMPTY | import("../actions/action").BranchOperator.LIST_IS_NOT_EMPTY | import("../actions/action").BranchOperator.EXISTS | import("../actions/action").BranchOperator.DOES_NOT_EXIST | undefined;
                    firstValue: string;
                })[][];
                branchType: import("../actions/action").BranchExecutionType.CONDITION;
                branchName: string;
            } | {
                branchType: import("../actions/action").BranchExecutionType.FALLBACK;
                branchName: string;
            })[];
            executionType: import("../actions/action").RouterExecutionType;
        };
        valid: boolean;
    } | {
        skip?: boolean | undefined;
        customLogoUrl?: string | undefined;
        type: import("../actions/action").ActionType.LOOP_ON_ITEMS;
        name: string;
        displayName: string;
        settings: {
            inputUiInfo: {
                sampleDataFileId?: string | undefined;
                sampleDataInputFileId?: string | undefined;
                lastTestDate?: string | undefined;
                customizedInputs?: {
                    [x: string]: unknown;
                } | undefined;
                schema?: {
                    [x: string]: unknown;
                } | undefined;
                currentSelectedData?: unknown;
            };
            items: string;
        };
        valid: boolean;
    } | {
        skip?: boolean | undefined;
        customLogoUrl?: string | undefined;
        type: import("../actions/action").ActionType.PIECE;
        name: string;
        displayName: string;
        settings: {
            errorHandlingOptions?: {
                continueOnFailure?: {
                    value: boolean;
                } | undefined;
                retryOnFailure?: {
                    value: boolean;
                } | undefined;
            } | undefined;
            actionName?: string | undefined;
            packageType: import("../../pieces").PackageType;
            pieceType: import("../../pieces").PieceType;
            pieceName: string;
            pieceVersion: string;
            input: {
                [x: string]: unknown;
            };
            inputUiInfo: {
                sampleDataFileId?: string | undefined;
                sampleDataInputFileId?: string | undefined;
                lastTestDate?: string | undefined;
                customizedInputs?: {
                    [x: string]: unknown;
                } | undefined;
                schema?: {
                    [x: string]: unknown;
                } | undefined;
                currentSelectedData?: unknown;
            };
        };
        valid: boolean;
    } | {
        skip?: boolean | undefined;
        customLogoUrl?: string | undefined;
        type: import("../actions/action").ActionType.CODE;
        name: string;
        displayName: string;
        settings: {
            inputUiInfo?: {
                sampleDataFileId?: string | undefined;
                sampleDataInputFileId?: string | undefined;
                lastTestDate?: string | undefined;
                customizedInputs?: {
                    [x: string]: unknown;
                } | undefined;
                schema?: {
                    [x: string]: unknown;
                } | undefined;
                currentSelectedData?: unknown;
            } | undefined;
            errorHandlingOptions?: {
                continueOnFailure?: {
                    value: boolean;
                } | undefined;
                retryOnFailure?: {
                    value: boolean;
                } | undefined;
            } | undefined;
            input: {
                [x: string]: any;
            };
            sourceCode: {
                code: string;
                packageJson: string;
            };
        };
        valid: boolean;
    };
} | {
    type: FlowOperationType.ADD_ACTION;
    request: {
        stepLocationRelativeToParent?: StepLocationRelativeToParent | undefined;
        branchIndex?: number | undefined;
        parentStep: string;
        action: {
            skip?: boolean | undefined;
            customLogoUrl?: string | undefined;
            type: import("../actions/action").ActionType.ROUTER;
            name: string;
            displayName: string;
            settings: {
                inputUiInfo: {
                    sampleDataFileId?: string | undefined;
                    sampleDataInputFileId?: string | undefined;
                    lastTestDate?: string | undefined;
                    customizedInputs?: {
                        [x: string]: unknown;
                    } | undefined;
                    schema?: {
                        [x: string]: unknown;
                    } | undefined;
                    currentSelectedData?: unknown;
                };
                branches: ({
                    conditions: ({
                        caseSensitive?: boolean | undefined;
                        operator?: import("../actions/action").BranchOperator.TEXT_CONTAINS | import("../actions/action").BranchOperator.TEXT_DOES_NOT_CONTAIN | import("../actions/action").BranchOperator.TEXT_EXACTLY_MATCHES | import("../actions/action").BranchOperator.TEXT_DOES_NOT_EXACTLY_MATCH | import("../actions/action").BranchOperator.TEXT_STARTS_WITH | import("../actions/action").BranchOperator.TEXT_DOES_NOT_START_WITH | import("../actions/action").BranchOperator.TEXT_ENDS_WITH | import("../actions/action").BranchOperator.TEXT_DOES_NOT_END_WITH | import("../actions/action").BranchOperator.LIST_CONTAINS | import("../actions/action").BranchOperator.LIST_DOES_NOT_CONTAIN | undefined;
                        firstValue: string;
                        secondValue: string;
                    } | {
                        operator?: import("../actions/action").BranchOperator.NUMBER_IS_GREATER_THAN | import("../actions/action").BranchOperator.NUMBER_IS_LESS_THAN | import("../actions/action").BranchOperator.NUMBER_IS_EQUAL_TO | undefined;
                        firstValue: string;
                        secondValue: string;
                    } | {
                        operator?: import("../actions/action").BranchOperator.DATE_IS_BEFORE | import("../actions/action").BranchOperator.DATE_IS_EQUAL | import("../actions/action").BranchOperator.DATE_IS_AFTER | undefined;
                        firstValue: string;
                        secondValue: string;
                    } | {
                        operator?: import("../actions/action").BranchOperator.BOOLEAN_IS_TRUE | import("../actions/action").BranchOperator.BOOLEAN_IS_FALSE | import("../actions/action").BranchOperator.LIST_IS_EMPTY | import("../actions/action").BranchOperator.LIST_IS_NOT_EMPTY | import("../actions/action").BranchOperator.EXISTS | import("../actions/action").BranchOperator.DOES_NOT_EXIST | undefined;
                        firstValue: string;
                    })[][];
                    branchType: import("../actions/action").BranchExecutionType.CONDITION;
                    branchName: string;
                } | {
                    branchType: import("../actions/action").BranchExecutionType.FALLBACK;
                    branchName: string;
                })[];
                executionType: import("../actions/action").RouterExecutionType;
            };
            valid: boolean;
        } | {
            skip?: boolean | undefined;
            customLogoUrl?: string | undefined;
            type: import("../actions/action").ActionType.LOOP_ON_ITEMS;
            name: string;
            displayName: string;
            settings: {
                inputUiInfo: {
                    sampleDataFileId?: string | undefined;
                    sampleDataInputFileId?: string | undefined;
                    lastTestDate?: string | undefined;
                    customizedInputs?: {
                        [x: string]: unknown;
                    } | undefined;
                    schema?: {
                        [x: string]: unknown;
                    } | undefined;
                    currentSelectedData?: unknown;
                };
                items: string;
            };
            valid: boolean;
        } | {
            skip?: boolean | undefined;
            customLogoUrl?: string | undefined;
            type: import("../actions/action").ActionType.PIECE;
            name: string;
            displayName: string;
            settings: {
                errorHandlingOptions?: {
                    continueOnFailure?: {
                        value: boolean;
                    } | undefined;
                    retryOnFailure?: {
                        value: boolean;
                    } | undefined;
                } | undefined;
                actionName?: string | undefined;
                packageType: import("../../pieces").PackageType;
                pieceType: import("../../pieces").PieceType;
                pieceName: string;
                pieceVersion: string;
                input: {
                    [x: string]: unknown;
                };
                inputUiInfo: {
                    sampleDataFileId?: string | undefined;
                    sampleDataInputFileId?: string | undefined;
                    lastTestDate?: string | undefined;
                    customizedInputs?: {
                        [x: string]: unknown;
                    } | undefined;
                    schema?: {
                        [x: string]: unknown;
                    } | undefined;
                    currentSelectedData?: unknown;
                };
            };
            valid: boolean;
        } | {
            skip?: boolean | undefined;
            customLogoUrl?: string | undefined;
            type: import("../actions/action").ActionType.CODE;
            name: string;
            displayName: string;
            settings: {
                inputUiInfo?: {
                    sampleDataFileId?: string | undefined;
                    sampleDataInputFileId?: string | undefined;
                    lastTestDate?: string | undefined;
                    customizedInputs?: {
                        [x: string]: unknown;
                    } | undefined;
                    schema?: {
                        [x: string]: unknown;
                    } | undefined;
                    currentSelectedData?: unknown;
                } | undefined;
                errorHandlingOptions?: {
                    continueOnFailure?: {
                        value: boolean;
                    } | undefined;
                    retryOnFailure?: {
                        value: boolean;
                    } | undefined;
                } | undefined;
                input: {
                    [x: string]: any;
                };
                sourceCode: {
                    code: string;
                    packageJson: string;
                };
            };
            valid: boolean;
        };
    };
} | {
    type: FlowOperationType.UPDATE_TRIGGER;
    request: {
        nextAction?: any;
        type: import("../triggers/trigger").TriggerType.EMPTY;
        name: string;
        displayName: string;
        settings: any;
        valid: boolean;
    } | {
        nextAction?: any;
        type: import("../triggers/trigger").TriggerType.PIECE;
        name: string;
        displayName: string;
        settings: {
            triggerName?: string | undefined;
            packageType: import("../../pieces").PackageType;
            pieceType: import("../../pieces").PieceType;
            pieceName: string;
            pieceVersion: string;
            input: {
                [x: string]: any;
            };
            inputUiInfo: {
                sampleDataFileId?: string | undefined;
                sampleDataInputFileId?: string | undefined;
                lastTestDate?: string | undefined;
                customizedInputs?: {
                    [x: string]: unknown;
                } | undefined;
                schema?: {
                    [x: string]: unknown;
                } | undefined;
                currentSelectedData?: unknown;
            };
        };
        valid: boolean;
    };
} | {
    type: FlowOperationType.CHANGE_FOLDER;
    request: {
        folderId?: string | null | undefined;
    };
} | {
    type: FlowOperationType.DUPLICATE_ACTION;
    request: {
        stepName: string;
    };
} | {
    type: FlowOperationType.DELETE_BRANCH;
    request: {
        stepName: string;
        branchIndex: number;
    };
} | {
    type: FlowOperationType.ADD_BRANCH;
    request: {
        conditions?: ({
            caseSensitive?: boolean | undefined;
            operator?: import("../actions/action").BranchOperator.TEXT_CONTAINS | import("../actions/action").BranchOperator.TEXT_DOES_NOT_CONTAIN | import("../actions/action").BranchOperator.TEXT_EXACTLY_MATCHES | import("../actions/action").BranchOperator.TEXT_DOES_NOT_EXACTLY_MATCH | import("../actions/action").BranchOperator.TEXT_STARTS_WITH | import("../actions/action").BranchOperator.TEXT_DOES_NOT_START_WITH | import("../actions/action").BranchOperator.TEXT_ENDS_WITH | import("../actions/action").BranchOperator.TEXT_DOES_NOT_END_WITH | import("../actions/action").BranchOperator.LIST_CONTAINS | import("../actions/action").BranchOperator.LIST_DOES_NOT_CONTAIN | undefined;
            firstValue: string;
            secondValue: string;
        } | {
            operator?: import("../actions/action").BranchOperator.NUMBER_IS_GREATER_THAN | import("../actions/action").BranchOperator.NUMBER_IS_LESS_THAN | import("../actions/action").BranchOperator.NUMBER_IS_EQUAL_TO | undefined;
            firstValue: string;
            secondValue: string;
        } | {
            operator?: import("../actions/action").BranchOperator.DATE_IS_BEFORE | import("../actions/action").BranchOperator.DATE_IS_EQUAL | import("../actions/action").BranchOperator.DATE_IS_AFTER | undefined;
            firstValue: string;
            secondValue: string;
        } | {
            operator?: import("../actions/action").BranchOperator.BOOLEAN_IS_TRUE | import("../actions/action").BranchOperator.BOOLEAN_IS_FALSE | import("../actions/action").BranchOperator.LIST_IS_EMPTY | import("../actions/action").BranchOperator.LIST_IS_NOT_EMPTY | import("../actions/action").BranchOperator.EXISTS | import("../actions/action").BranchOperator.DOES_NOT_EXIST | undefined;
            firstValue: string;
        })[][] | undefined;
        stepName: string;
        branchName: string;
        branchIndex: number;
    };
} | {
    type: FlowOperationType.DUPLICATE_BRANCH;
    request: {
        stepName: string;
        branchIndex: number;
    };
} | {
    type: FlowOperationType.SET_SKIP_ACTION;
    request: {
        skip: boolean;
        names: string[];
    };
})[];
