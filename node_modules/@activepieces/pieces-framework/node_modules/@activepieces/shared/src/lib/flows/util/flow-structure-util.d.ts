import { Action, ActionType, BranchCondition, BranchExecutionType, LoopOnItemsAction, RouterAction } from '../actions/action';
import { FlowVersion } from '../flow-version';
import { Trigger, TriggerType } from '../triggers/trigger';
export type Step = Action | Trigger;
type StepWithIndex = Step & {
    dfsIndex: number;
};
declare function isAction(type: ActionType | TriggerType | undefined): type is ActionType;
declare function isTrigger(type: ActionType | TriggerType | undefined): type is TriggerType;
declare function getActionOrThrow(name: string, flowRoot: Step): Action;
declare function getTriggerOrThrow(name: string, flowRoot: Step): Trigger;
declare function getStep(name: string, flowRoot: Step): Step | undefined;
declare function getStepOrThrow(name: string, flowRoot: Step): Step;
declare function transferStep<T extends Step>(step: Step, transferFunction: (step: T) => T): Step;
declare function transferFlow<T extends Step>(flowVersion: FlowVersion, transferFunction: (step: T) => T): FlowVersion;
declare function getAllSteps(step: Step): Step[];
declare function findPathToStep(trigger: Trigger, targetStepName: string): StepWithIndex[];
declare function getAllChildSteps(action: LoopOnItemsAction | RouterAction): Step[];
declare function isChildOf(parent: Step, childStepName: string): boolean;
declare function getAllNextActionsWithoutChildren(start: Step): Step[];
export declare const flowStructureUtil: {
    isTrigger: typeof isTrigger;
    isAction: typeof isAction;
    getAllSteps: typeof getAllSteps;
    transferStep: typeof transferStep;
    transferFlow: typeof transferFlow;
    getStepOrThrow: typeof getStepOrThrow;
    getActionOrThrow: typeof getActionOrThrow;
    getTriggerOrThrow: typeof getTriggerOrThrow;
    getStep: typeof getStep;
    createBranch: (branchName: string, conditions: BranchCondition[][] | undefined) => {
        conditions: ({
            caseSensitive?: boolean | undefined;
            operator?: import("../actions/action").BranchOperator.TEXT_CONTAINS | import("../actions/action").BranchOperator.TEXT_DOES_NOT_CONTAIN | import("../actions/action").BranchOperator.TEXT_EXACTLY_MATCHES | import("../actions/action").BranchOperator.TEXT_DOES_NOT_EXACTLY_MATCH | import("../actions/action").BranchOperator.TEXT_STARTS_WITH | import("../actions/action").BranchOperator.TEXT_DOES_NOT_START_WITH | import("../actions/action").BranchOperator.TEXT_ENDS_WITH | import("../actions/action").BranchOperator.TEXT_DOES_NOT_END_WITH | import("../actions/action").BranchOperator.LIST_CONTAINS | import("../actions/action").BranchOperator.LIST_DOES_NOT_CONTAIN | undefined;
            firstValue: string;
            secondValue: string;
        } | {
            operator?: import("../actions/action").BranchOperator.NUMBER_IS_GREATER_THAN | import("../actions/action").BranchOperator.NUMBER_IS_LESS_THAN | import("../actions/action").BranchOperator.NUMBER_IS_EQUAL_TO | undefined;
            firstValue: string;
            secondValue: string;
        } | {
            operator?: import("../actions/action").BranchOperator.DATE_IS_BEFORE | import("../actions/action").BranchOperator.DATE_IS_EQUAL | import("../actions/action").BranchOperator.DATE_IS_AFTER | undefined;
            firstValue: string;
            secondValue: string;
        } | {
            operator?: import("../actions/action").BranchOperator.BOOLEAN_IS_TRUE | import("../actions/action").BranchOperator.BOOLEAN_IS_FALSE | import("../actions/action").BranchOperator.LIST_IS_EMPTY | import("../actions/action").BranchOperator.LIST_IS_NOT_EMPTY | import("../actions/action").BranchOperator.EXISTS | import("../actions/action").BranchOperator.DOES_NOT_EXIST | undefined;
            firstValue: string;
        })[][];
        branchType: BranchExecutionType;
        branchName: string;
    };
    findPathToStep: typeof findPathToStep;
    isChildOf: typeof isChildOf;
    findUnusedName: (source: Trigger | string[]) => string;
    getAllNextActionsWithoutChildren: typeof getAllNextActionsWithoutChildren;
    getAllChildSteps: typeof getAllChildSteps;
};
export {};
