import { Static } from '@sinclair/typebox';
import { LocalesEnum } from '../common';
import { ApId } from '../common/id-generator';
export type PlatformId = ApId;
export declare enum FilteredPieceBehavior {
    ALLOWED = "ALLOWED",
    BLOCKED = "BLOCKED"
}
export declare const SMTPInformation: import("@sinclair/typebox").TObject<{
    user: import("@sinclair/typebox").TString;
    senderEmail: import("@sinclair/typebox").TString;
    senderName: import("@sinclair/typebox").TString;
    password: import("@sinclair/typebox").TString;
    host: import("@sinclair/typebox").TString;
    port: import("@sinclair/typebox").TNumber;
}>;
export type SMTPInformation = Static<typeof SMTPInformation>;
export declare enum CopilotProviderType {
    OPENAI = "openai",
    AZURE_OPENAI = "azureOpenai"
}
export declare const OpenAiProvider: import("@sinclair/typebox").TObject<{
    baseUrl: import("@sinclair/typebox").TString;
    apiKey: import("@sinclair/typebox").TString;
}>;
export type OpenAiProvider = Static<typeof OpenAiProvider>;
export declare const AzureOpenAiProvider: import("@sinclair/typebox").TObject<{
    resourceName: import("@sinclair/typebox").TString;
    deploymentName: import("@sinclair/typebox").TString;
    apiKey: import("@sinclair/typebox").TString;
}>;
export type AzureOpenAiProvider = Static<typeof AzureOpenAiProvider>;
export declare const CopilotSettings: import("@sinclair/typebox").TObject<{
    providers: import("@sinclair/typebox").TObject<{
        openai: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            baseUrl: import("@sinclair/typebox").TString;
            apiKey: import("@sinclair/typebox").TString;
        }>>;
        azureOpenai: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
            resourceName: import("@sinclair/typebox").TString;
            deploymentName: import("@sinclair/typebox").TString;
            apiKey: import("@sinclair/typebox").TString;
        }>>;
    }>;
}>;
export type CopilotSettings = Static<typeof CopilotSettings>;
export declare const CopilotSettingsWithoutSensitiveData: import("@sinclair/typebox").TObject<{
    providers: import("@sinclair/typebox").TObject<{
        openai: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
        azureOpenai: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
    }>;
}>;
export type CopilotSettingsWithoutSensitiveData = Static<typeof CopilotSettingsWithoutSensitiveData>;
export declare const PlatformUsage: import("@sinclair/typebox").TObject<{
    tasks: import("@sinclair/typebox").TNumber;
    aiCredits: import("@sinclair/typebox").TNumber;
}>;
export type PlatformUsage = Static<typeof PlatformUsage>;
export declare const Platform: import("@sinclair/typebox").TObject<{
    ownerId: import("@sinclair/typebox").TString;
    name: import("@sinclair/typebox").TString;
    primaryColor: import("@sinclair/typebox").TString;
    logoIconUrl: import("@sinclair/typebox").TString;
    fullLogoUrl: import("@sinclair/typebox").TString;
    favIconUrl: import("@sinclair/typebox").TString;
    /**
    * @deprecated Use projects filter instead.
    */
    filteredPieceNames: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    /**
    * @deprecated Use projects filter instead.
    */
    filteredPieceBehavior: import("@sinclair/typebox").TEnum<typeof FilteredPieceBehavior>;
    smtp: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
        password: string;
        user: string;
        senderEmail: string;
        senderName: string;
        host: string;
        port: number;
    } | null>>;
    cloudAuthEnabled: import("@sinclair/typebox").TBoolean;
    environmentsEnabled: import("@sinclair/typebox").TBoolean;
    analyticsEnabled: import("@sinclair/typebox").TBoolean;
    showPoweredBy: import("@sinclair/typebox").TBoolean;
    auditLogEnabled: import("@sinclair/typebox").TBoolean;
    embeddingEnabled: import("@sinclair/typebox").TBoolean;
    managePiecesEnabled: import("@sinclair/typebox").TBoolean;
    manageTemplatesEnabled: import("@sinclair/typebox").TBoolean;
    customAppearanceEnabled: import("@sinclair/typebox").TBoolean;
    manageProjectsEnabled: import("@sinclair/typebox").TBoolean;
    projectRolesEnabled: import("@sinclair/typebox").TBoolean;
    customDomainsEnabled: import("@sinclair/typebox").TBoolean;
    globalConnectionsEnabled: import("@sinclair/typebox").TBoolean;
    customRolesEnabled: import("@sinclair/typebox").TBoolean;
    apiKeysEnabled: import("@sinclair/typebox").TBoolean;
    flowIssuesEnabled: import("@sinclair/typebox").TBoolean;
    alertsEnabled: import("@sinclair/typebox").TBoolean;
    defaultLocale: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TEnum<typeof LocalesEnum>>;
    ssoEnabled: import("@sinclair/typebox").TBoolean;
    enforceAllowedAuthDomains: import("@sinclair/typebox").TBoolean;
    allowedAuthDomains: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    federatedAuthProviders: import("@sinclair/typebox").TObject<{
        google: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
            clientId: string;
            clientSecret: string;
        } | null>>;
        github: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
            clientId: string;
            clientSecret: string;
        } | null>>;
        saml: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
            idpMetadata: string;
            idpCertificate: string;
        } | null>>;
    }>;
    emailAuthEnabled: import("@sinclair/typebox").TBoolean;
    licenseKey: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    pinnedPieces: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    copilotSettings: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        providers: import("@sinclair/typebox").TObject<{
            openai: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
                baseUrl: import("@sinclair/typebox").TString;
                apiKey: import("@sinclair/typebox").TString;
            }>>;
            azureOpenai: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
                resourceName: import("@sinclair/typebox").TString;
                deploymentName: import("@sinclair/typebox").TString;
                apiKey: import("@sinclair/typebox").TString;
            }>>;
        }>;
    }>>;
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
}>;
export type Platform = Static<typeof Platform>;
export declare const PlatformWithoutSensitiveData: import("@sinclair/typebox").TObject<{
    smtp: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{} | null>>;
    defaultLocale: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    federatedAuthProviders: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
        google?: {
            clientId: string;
        } | null | undefined;
        saml?: {} | null | undefined;
        github?: {
            clientId: string;
        } | null | undefined;
    } | null>>;
    copilotSettings: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        providers: import("@sinclair/typebox").TObject<{
            openai: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
            azureOpenai: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{}>>;
        }>;
    }>>;
    hasLicenseKey: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TBoolean>;
    licenseExpiresAt: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    id: import("@sinclair/typebox").TString;
    name: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
    ownerId: import("@sinclair/typebox").TString;
    primaryColor: import("@sinclair/typebox").TString;
    logoIconUrl: import("@sinclair/typebox").TString;
    fullLogoUrl: import("@sinclair/typebox").TString;
    favIconUrl: import("@sinclair/typebox").TString;
    filteredPieceNames: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    filteredPieceBehavior: import("@sinclair/typebox").TEnum<typeof FilteredPieceBehavior>;
    cloudAuthEnabled: import("@sinclair/typebox").TBoolean;
    environmentsEnabled: import("@sinclair/typebox").TBoolean;
    analyticsEnabled: import("@sinclair/typebox").TBoolean;
    showPoweredBy: import("@sinclair/typebox").TBoolean;
    auditLogEnabled: import("@sinclair/typebox").TBoolean;
    embeddingEnabled: import("@sinclair/typebox").TBoolean;
    managePiecesEnabled: import("@sinclair/typebox").TBoolean;
    manageTemplatesEnabled: import("@sinclair/typebox").TBoolean;
    customAppearanceEnabled: import("@sinclair/typebox").TBoolean;
    manageProjectsEnabled: import("@sinclair/typebox").TBoolean;
    projectRolesEnabled: import("@sinclair/typebox").TBoolean;
    customDomainsEnabled: import("@sinclair/typebox").TBoolean;
    globalConnectionsEnabled: import("@sinclair/typebox").TBoolean;
    customRolesEnabled: import("@sinclair/typebox").TBoolean;
    apiKeysEnabled: import("@sinclair/typebox").TBoolean;
    flowIssuesEnabled: import("@sinclair/typebox").TBoolean;
    alertsEnabled: import("@sinclair/typebox").TBoolean;
    ssoEnabled: import("@sinclair/typebox").TBoolean;
    enforceAllowedAuthDomains: import("@sinclair/typebox").TBoolean;
    allowedAuthDomains: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    emailAuthEnabled: import("@sinclair/typebox").TBoolean;
    pinnedPieces: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
}>;
export type PlatformWithoutSensitiveData = Static<typeof PlatformWithoutSensitiveData>;
